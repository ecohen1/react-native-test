'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = bound;

function bound(target, key, _ref) {
  var value = _ref.value;
  var configurable = _ref.configurable;
  var enumerable = _ref.enumerable;
  var writable = _ref.writable;

  return {
    configurable: configurable,
    enumerable: enumerable,

    // on set replace the property descriptor
    set: function set(newValue) {
      if (this !== target || !writable) {
        throw new Error('class-bind: bound property \'' + key + '\' is not writable');
      }

      // call this function again with a different value
      var descriptor = bound(target, key, {
        configurable: configurable, enumerable: enumerable, value: newValue
      });

      Object.defineProperty(this, key, descriptor);
    },

    get: function getter() {
      // e.g. App.prototype.returnsFoo doesn't mess up the property
      if (this === target) return value;

      // in development we return it every time so that react-hot-loader
      // works
      if (process.env.NODE_ENV !== 'production') {
        return value.bind(this);
      }

      // for production we shadow the accessor property descriptor
      // with a simple property descriptor containing the bound function
      Object.defineProperty(this, key, {
        configurable: configurable, enumerable: enumerable, writable: writable,
        value: value.bind(this)
      });

      return this[key];
    }
  };
}
module.exports = exports['default'];